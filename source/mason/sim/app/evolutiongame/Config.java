package sim.app.evolutiongame;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.internal.LinkedTreeMap;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ben Armstrong
 */
public class Config {
    
    private static final String FILE_NAME = "modules.json";
    private static final String MODULE_PACKAGE = "sim.app.evolutiongame.modules";
    private static final String MODULE_PATH = "source/mason/sim/app/evolutiongame/modules";
    
    /**
     * From the list of modules generated by findModuleImplementations(), this 
     * method will create/overwrite the json configuration file in the root
     * project directory.
     * Currently the config file consists of a list of implementations of each
     * module and a list of which implementation to use for each module.
     * @param modules 
     */
    public static void generateConfigFile() {
        
        
        HashMap<String, Object> modules = Config.findModuleImplementations();
        HashMap<String, String> defaults = getDefaultImplementations(modules);
        
        HashMap<String, Object> output = new HashMap<>();
        output.put("All Module Implementations", modules);
        output.put("Modules In Use", defaults);
        
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (FileWriter writer = new FileWriter(FILE_NAME)) {
          writer.write(gson.toJson(output));
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }
    
    /**
     * Finds a list of all java classes that are in each module subdirectory.
     * Associates with each module the classes under it.
     * Ex: If /modules contains folders "play" and "move", with classes "play1",
     * "play2", "move1", "move2" then this will return a map of "play" -> {play1, play2},
     * "move" -> {move1, move2}.
     * This will likely assume that /modules contains only folders and that each
     * folder within /modules contains only files providing an implementation
     * of that module.
     * @return 
     */
    public static HashMap<String, Object> findModuleImplementations() {
        FileFilter folderFilter = new FileFilter() {
            @Override
            public boolean accept(File pathname){
                return pathname.isDirectory();
            }};
        FileFilter fileFilter = new FileFilter() {
            @Override
            public boolean accept(File pathname){
                return pathname.isFile();
            }};
        
        File folder = new File(MODULE_PATH);
        
        HashMap<String, Object> map = new HashMap<>();
        ArrayList<String> implementations = null;
        String s = folder.getAbsolutePath();
        
        for(File module: folder.listFiles(folderFilter)) {
            for(File implementation: module.listFiles(fileFilter)) {
                if(implementations == null)
                    implementations = new ArrayList<>();
                implementations.add(implementation.getName().replace(".java", ""));
            }
            if(implementations != null) {
                map.put(module.getName(), implementations);
                implementations = null;
            }
            
        }
        
        return map;
    }
    
    /**
     * Gets the name of the default implementation of each module given to it.
     * The default name is the implementation that has the same name as the 
     * module, or if that doesn't exist, the first implementation listed.
     * @param modules
     * @return A map of module names to the default implementation of that module.
     */
    private static HashMap<String, String> getDefaultImplementations(HashMap<String, Object> modules){
        
        HashMap<String, String> defaults = new HashMap<>();
        
        for(String module_name: modules.keySet()) {
            ArrayList<String> implementations = (ArrayList<String>)modules.get(module_name);
            
            for(String implementation: implementations) {
                if(implementation.equalsIgnoreCase(module_name)) {
                    defaults.put(module_name, implementation);
                    break;
                }
            }
            if(!defaults.containsKey(module_name) && implementations.size() > 0)
                defaults.put(module_name, implementations.get(0));
        }
        
        
        return defaults;
    }
    
    /**
     * Reads in the config file and puts it into a hashmap.
     * @param p
     * @return 
     */
    public static HashMap<String, Object> readConfigFile(Population p) {
        Gson gson = new Gson();
        
        HashMap<String, Object> configElements = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
              configElements = gson.fromJson(reader, HashMap.class);
        } catch (FileNotFoundException e) {
            System.out.println("Finised with JSON examples now.");
        } catch (IOException e) {
            System.out.println("Finised with JSON examples now.");
        }
        
        return configElements;
    }

    /**
     * Generates a list of all methods that should be run for each player in
     * each time step. Methods should all have the signature:
     *  public static void run(Population state, Player p)
     * The classes that the methods are in should be specified in the
     * configuration file.
     * @return 
     */
    public static HashMap<String, Method> getMethods(LinkedTreeMap<String, String> modules) {
        
        //Method[] methods = new Method[modules.size()];
        HashMap<String, Method> methods = new HashMap<String, Method>();
        
        for(String module: modules.keySet()) {
            Class c = null;
            try {
                c = Class.forName(MODULE_PACKAGE+"."+module+"."+modules.get(module));

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Method m;
            try {
                m = c.getMethod("run", Population.class, Player.class, Object.class);
                methods.put(module, m);
            } catch (NoSuchMethodException ex){
                System.out.println("No run() method found in " + c.toString());
            } catch(SecurityException ex) {
                Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return methods;
        
//        Class c = null;
//        try {
//            c = Class.forName(MODULE_PACKAGE + ".PlayGame.PlayGame");
//            
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        Method m = null;
//        try {
//            m = c.getMethod("run", Population.class, Player.class);
//        } catch (NoSuchMethodException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SecurityException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        //to invoke:
//        try {
//            //first null is because the method is static
//            m.invoke(null, null, new Player(new int[0][0], null));
//        } catch (IllegalAccessException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IllegalArgumentException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (InvocationTargetException ex) {
//            Logger.getLogger(Population.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        return null;
    }
}
